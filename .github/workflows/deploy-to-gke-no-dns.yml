---
# deploy-to-gke-no-dns.yaml
# Deploy to GKE Without DNS
name: Deploy to GKE Without DNS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    environment: .darkseek_env
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate workflow syntax
        uses: frenck/action-yamllint@v1
        with:
          file: .github/workflows/deploy-to-gke-no-dns.yml

      - name: Check required secrets
        run: |
          if [[ -z "${{ secrets.GCP_SA_KEY }}" || -z "${{ secrets.GCP_PROJECT_ID }}" || -z "${{ secrets.GKE_CLUSTER_ZONE }}" || -z "${{ secrets.GKE_CLUSTER_NAME }}" ]]; then
            echo "Error: One or more required secrets not set"
            exit 1
          fi
          echo "GKE_CLUSTER_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}"
        shell: bash

      - name: Debug k8s directory
        run: |
          echo "Current directory: $(pwd)"
          ls -la .
          ls -la k8s/
          if [ -f "./k8s/rollback_k8s.sh" ]; then
            echo "rollback_k8s.sh found"
            chmod +x ./k8s/rollback_k8s.sh
          else
            echo "Error: rollback_k8s.sh not found in k8s/"
            exit 1
          fi
        shell: bash

      - name: Log in to Docker Hub
        run: |
          if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_TOKEN" ]; then
            echo "Docker Hub credentials not set, skipping login"
          else
            echo "Logging in to Docker Hub..."
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          fi
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        shell: bash

      - name: Pre-pull BuildKit with retries
        run: |
          for i in 1 2 3; do
            if docker pull moby/buildkit:buildx-stable-1; then
              echo "Successfully pulled BuildKit image"
              break
            fi
            echo "Retry $i/3 failed, waiting..."
            sleep $((i * 10))
            if [ $i -eq 3 ]; then
              echo "Error: Failed to pull BuildKit after 3 retries"
              exit 1
            fi
          done
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run tests
        run: |
          echo "Running tests..."
          if [ -d "tests" ]; then
            pytest tests/ || { echo "Tests failed, aborting deployment"; exit 1; }
          else
            echo "No tests directory found, skipping tests"
          fi
        shell: bash

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Verify service account
        run: |
          if [ -z "$GOOGLE_GHA_CREDS_PATH" ]; then
            echo "Error: GOOGLE_GHA_CREDS_PATH not set"
            exit 1
          fi
          if [ ! -f "$GOOGLE_GHA_CREDS_PATH" ]; then
            echo "Error: Credentials file not found"
            exit 1
          fi
          SERVICE_ACCOUNT=$(jq -r '.client_email' "$GOOGLE_GHA_CREDS_PATH")
          echo "Service Account: $SERVICE_ACCOUNT"
        shell: bash

      - name: List all clusters
        id: list-clusters
        run: |
          gcloud container clusters list \
            --project="${{ secrets.GCP_PROJECT_ID }}"
        shell: bash

      - name: Verify GKE cluster location
        run: |
          echo "GKE_CLUSTER_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}"
          echo "Running as: $(gcloud auth list \
            --filter=status:ACTIVE --format='value(account)')"
          echo "Project: $(gcloud config get-value project)"
          gcloud container clusters list \
            --region="${{ secrets.GKE_CLUSTER_ZONE }}" \
            --project="${{ secrets.GCP_PROJECT_ID }}"
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GKE_CLUSTER_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
          GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
        shell: bash

      - name: Install kubectl and gke-gcloud-auth-plugin
        run: |
          echo "Checking for existing kubectl..."
          if ! command -v kubectl &> /dev/null; then
            echo "kubectl not found, installing..."
            KUBECTL_URL="https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            echo "Downloading kubectl..."
            if curl -fLO "$KUBECTL_URL"; then
              chmod +x ./kubectl
              sudo mv ./kubectl /usr/local/bin/kubectl
              echo "kubectl installed successfully"
            else
              echo "Error: Failed to download kubectl"
              exit 1
            fi
          else
            echo "kubectl is already installed"
          fi
          echo "Installing gke-gcloud-auth-plugin..."
          if gcloud components install gke-gcloud-auth-plugin --quiet; then
            echo "gke-gcloud-auth-plugin installed"
          else
            echo "Error: Failed to install gke-gcloud-auth-plugin"
            exit 1
          fi
          echo "Checking gke-gcloud-auth-plugin version..."
          gke-gcloud-auth-plugin --version
        shell: bash

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials \
            "${{ secrets.GKE_CLUSTER_NAME }}" \
            --region="${{ secrets.GKE_CLUSTER_ZONE }}" \
            --project="${{ secrets.GCP_PROJECT_ID }}"
        shell: bash

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./app/frontend
          file: ./app/frontend/Dockerfile
          push: true
          tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/darkseek-frontend:latest

      - name: Build and push backend-ws
        uses: docker/build-push-action@v6
        with:
          context: ./app/backend
          file: ./app/backend/Dockerfile.ws
          push: true
          tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/darkseek-backend-ws:latest

      - name: Build and push backend-mqtt
        uses: docker/build-push-action@v6
        with:
          context: ./app/backend
          file: ./app/backend/Dockerfile.mqtt
          push: true
          tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/darkseek-backend-mqtt:latest

      - name: Deploy to GKE
        run: |
          echo "Deploying to GKE..."
          chmod +x ./k8s/deploy_k8s.sh
          ./k8s/deploy_k8s.sh || { echo "Deployment failed, rolling back..."; exit 1; }
        shell: bash

      - name: Verify deployment
        run: |
          kubectl get deployments -n default
          kubectl get pods -n default
          kubectl logs -n default -l app=darkseek-frontend --tail=50
          kubectl logs -n default -l app=darkseek-backend-ws --tail=50
          kubectl logs -n default -l app=darkseek-backend-mqtt --tail=50
        shell: bash

      - name: Rollback deployment
        if: failure()
        run: |
          echo "Rolling back to previous version..."
          if [ -f "./k8s/rollback_k8s.sh" ]; then
            chmod +x ./k8s/rollback_k8s.sh
            ./k8s/rollback_k8s.sh || { echo "Rollback failed"; exit 1; }
          else
            echo "Error: rollback_k8s.sh not found, skipping rollback"
            exit 1
          fi
        shell: bash
