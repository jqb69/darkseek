#.github/workflows/push-to-gcr.yml
name: Push Docker Images to GCR

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker --quiet

    - name: Install Docker Compose
      run: |
        DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '(?<="tag_name": ")[^"]*')
        sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    - name: Set environment variables from secrets
      run: |
        sed -i '/^GOOGLE_API_KEY=/d' .env
        echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
        sed -i '/^GOOGLE_CSE_ID=/d' .env
        echo "GOOGLE_CSE_ID=${{ secrets.GOOGLE_CSE_ID }}" >> .env
        sed -i '/^HUGGINGFACEHUB_API_TOKEN=/d' .env
        echo "HUGGINGFACEHUB_API_TOKEN=${{ secrets.HUGGINGFACEHUB_API_TOKEN }}" >> .env
        sed -i '/^DATABASE_URL=/d' .env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
        sed -i '/^REDIS_URL=/d' .env
        echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
        sed -i '/^MQTT_BROKER_HOST=/d' .env
        echo "MQTT_BROKER_HOST=${{ secrets.MQTT_BROKER_HOST }}" >> .env
        sed -i '/^MQTT_BROKER_PORT=/d' .env
        echo "MQTT_BROKER_PORT=${{ secrets.MQTT_BROKER_PORT }}" >> .env
        sed -i '/^MQTT_TLS=/d' .env
        echo "MQTT_TLS=${{ secrets.MQTT_TLS }}" >> .env
        sed -i '/^MQTT_USERNAME=/d' .env
        echo "MQTT_USERNAME=${{ secrets.MQTT_USERNAME }}" >> .env
        sed -i '/^MQTT_PASSWORD=/d' .env
        echo "MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}" >> .env
        sed -i '/^POSTGRES_USER=/d' .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        sed -i '/^POSTGRES_PASSWORD=/d' .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        sed -i '/^POSTGRES_DB=/d' .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env

    - name: Install Backend Requirements
      run: |
        pip install --no-cache-dir -r app/backend/requirements.txt

    - name: Install Frontend Requirements
      run: |
        pip install --no-cache-dir -r app/frontend/requirements.txt

    - name: Build and Push Frontend Image
      run: |
        docker-compose -f docker-compose.yaml build frontend
        docker tag darkseek_frontend:latest gcr.io/${{ secrets.GCP_PROJECT_ID }}/darkseek-frontend:latest
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/darkseek-frontend:latest
      working-directory: ./

    - name: Build and Push Backend MQTT Image
      run: |
        docker-compose -f docker-compose.yaml build backend-mqtt
        docker tag darkseek_backend-mqtt:latest gcr.io/${{ secrets.GCP_PROJECT_ID }}/darkseek-backend-mqtt:latest
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/darkseek-backend-mqtt:latest
      working-directory: ./

    - name: Build and Push Backend WebSocket Image
      run: |
        docker-compose -f docker-compose.yaml build backend-ws
        docker tag darkseek_backend-ws:latest gcr.io/${{ secrets.GCP_PROJECT_ID }}/darkseek-backend-ws:latest
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/darkseek-backend-ws:latest
      working-directory: ./
